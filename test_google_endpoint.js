const axios = require('axios');

// Configuraci√≥n
const API_BASE_URL = 'http://localhost:4000';

async function probarEndpointGoogleAuth() {
  console.log('üß™ Probando endpoint /usuarios/auth/google\n');
  
  try {
    // Verificar que el servidor est√© funcionando
    console.log('1. üîç Verificando servidor...');
    const pingResponse = await axios.get(`${API_BASE_URL}/ping`);
    console.log('‚úÖ Servidor funcionando:', pingResponse.data);
    
    // Prueba 1: Sin body (debe fallar)
    console.log('\n2. üö´ Probando sin body (debe fallar)...');
    try {
      await axios.post(`${API_BASE_URL}/usuarios/auth/google`);
    } catch (error) {
      console.log('‚úÖ Error esperado:', error.response?.status, error.response?.data?.message);
    }
    
    // Prueba 2: Con body vac√≠o (debe fallar)
    console.log('\n3. üö´ Probando con body vac√≠o (debe fallar)...');
    try {
      await axios.post(`${API_BASE_URL}/usuarios/auth/google`, {});
    } catch (error) {
      console.log('‚úÖ Error esperado:', error.response?.status, error.response?.data?.message);
      console.log('   Body recibido por server:', error.response?.data?.received_body);
    }
    
    // Prueba 3: Con token inv√°lido (debe fallar con error espec√≠fico)
    console.log('\n4. üö´ Probando con token inv√°lido (debe fallar)...');
    try {
      await axios.post(`${API_BASE_URL}/usuarios/auth/google`, {
        googleToken: 'token_invalido_de_prueba'
      });
    } catch (error) {
      console.log('‚úÖ Error esperado:', error.response?.status, error.response?.data?.message);
      console.log('   Detalles:', error.response?.data?.details);
    }
    
    // Prueba 4: Con token que parece v√°lido pero no lo es
    console.log('\n5. üö´ Probando con token JWT falso (debe fallar)...');
    try {
      const fakeJWT = 'eyJhbGciOiJSUzI1NiIsImtpZCI6ImFiYzEyMyJ9.eyJpc3MiOiJodHRwczovL2FjY291bnRzLmdvb2dsZS5jb20iLCJhdWQiOiIxMjM0NTYiLCJzdWIiOiIxMjM0NTY3ODkwIiwiZW1haWwiOiJ0ZXN0QGV4YW1wbGUuY29tIiwibmFtZSI6IlRlc3QgVXNlciIsImdpdmVuX25hbWUiOiJUZXN0IiwiZmFtaWx5X25hbWUiOiJVc2VyIiwicGljdHVyZSI6Imh0dHBzOi8vZXhhbXBsZS5jb20vcGhvdG8uanBnIiwiaWF0IjoxNjQwOTk1MjAwLCJleHAiOjE2NDA5OTg4MDB9.fake_signature';
      
      await axios.post(`${API_BASE_URL}/usuarios/auth/google`, {
        googleToken: fakeJWT
      });
    } catch (error) {
      console.log('‚úÖ Error esperado:', error.response?.status, error.response?.data?.message);
      console.log('   Detalles:', error.response?.data?.details);
    }
    
    // Prueba 5: Verificar headers y formato
    console.log('\n6. üìã Probando headers y formato...');
    try {
      await axios.post(`${API_BASE_URL}/usuarios/auth/google`, {
        googleToken: 'test_token'
      }, {
        headers: {
          'Content-Type': 'application/json',
          'User-Agent': 'Test-Client/1.0'
        }
      });
    } catch (error) {
      console.log('‚úÖ Endpoint proces√≥ la request correctamente');
      console.log('   Status:', error.response?.status);
      console.log('   Content-Type:', error.response?.headers['content-type']);
      console.log('   Response format:', typeof error.response?.data);
    }
    
    console.log('\nüéâ ¬°Pruebas completadas!');
    console.log('\nüìã Resumen:');
    console.log('   ‚úÖ Servidor est√° funcionando');
    console.log('   ‚úÖ Endpoint est√° recibiendo requests');
    console.log('   ‚úÖ Body parsing est√° funcionando');
    console.log('   ‚úÖ Middleware de validaci√≥n est√° funcionando');
    console.log('   ‚úÖ Respuestas de error son informativas');
    console.log('\nüí° Para probar con token real:');
    console.log('   1. Obt√©n un token real de Google Sign-In');
    console.log('   2. Usa el frontend de ejemplo en frontend-google-auth/');
    console.log('   3. O configura Google OAuth en la consola de Google');
    
  } catch (error) {
    console.error('‚ùå Error inesperado:', error.message);
    if (error.code === 'ECONNREFUSED') {
      console.log('üí° El servidor no est√° ejecut√°ndose. Ejecuta: npm start');
    }
  }
}

// Ejecutar pruebas
if (require.main === module) {
  probarEndpointGoogleAuth().catch(console.error);
}

module.exports = probarEndpointGoogleAuth;
